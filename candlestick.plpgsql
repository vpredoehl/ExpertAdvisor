--drop type cst cascade;
create type cst as ( dt timestamp without time zone, open numeric(10,6), close numeric(10,6), high numeric(10,6), low numeric(10,6), vol integer, target numeric(10,6) );

--drop type tgt cascade;
create type tgt as ( dt timestamp without time zone, target numeric(10,6) );


CREATE OR REPLACE FUNCTION candlestick_cur(tbl text, n int, unit text, fromdt timestamp without time zone, todt timestamp without time zone)  RETURNS refcursor
AS $$
declare
	higher_tf text;
	c refcursor;
begin
	select case when unit='minute' then 'hour'
	when unit='hour' then 'day'
	when unit='day' then 'month' 
	when unit='month' then 'year' 
	else ''	end into higher_tf;
	if higher_tf='' then raise exception 'unit must be year, month, day, hour, minute, not %', unit; end if;
	--raise info 'unit: %, higher_tf: %', unit, higher_tf;

	open c no scroll for execute
	'select *, (( high + low + close ) / 3)::numeric(10,6) as target from ( select distinct dt + mn * interval ''' || n::text || ' ' || unit || ''' as dt, ' 
		|| 'case when count(*) over w=1 then lag(ask,1) over w_1row else first_value(ask) over w end::numeric(10,6) as open,'
		|| ' last_value(ask) over w::numeric(10,6) as close,  '
                || 'case when count(*) over w=1 then max(ask) over w_1row else max(ask) over w end::numeric(10,6) as high,'
                || 'case when count(*) over w=1 then min(ask) over w_1row else min(ask) over w end::numeric(10,6) as low,'
		|| ' sum(vol) over w::integer as vol   from (
	select date_trunc(''' || higher_tf || ''', time) as dt, extract(' || unit || ' from time)::int / ' || n::text || ' as mn,  ask, vol '
	|| ' from ' || tbl || ' where time between ''' || fromdt::text || ''' and ''' || todt::text || ''' order by time) as t'
	|| ' window w as (partition by (dt, mn)), w_1row as ( rows 1 preceding ) order by dt asc);';

	return c;
end;
$$
LANGUAGE 'plpgsql'
PARALLEL SAFE;

CREATE OR REPLACE FUNCTION candlestick(tbl text, n int, unit text, fromdt timestamp without time zone DEFAULT '-INFINITY', todt timestamp without time zone DEFAULT 'INFINITY')  RETURNS setof cst
as $$
declare
	gl_row record;
	c refcursor;
	tf text;
	qs text;
	p text;
begin
	-- look for a materialized view
	if fromdt != '-INFINITY' and todt != 'INFINITY' then
		begin
			select case
		     		when unit = 'minute' then n::text || 'min'	
		     		when unit = 'hour' then n::text|| 'hr'	
		     		else n::text || unit
			end into tf;			
			select substring(tbl,1,6) into p;
			--raise info 'tf: %, p: %', tf, p;
			return query select * from public.candlestick_mv(p,tf,fromdt,todt);
		exception when others then
			raise notice '% %', SQLERRM, SQLSTATE;
		end; 
	end if;
	-- no view found
	select * from public.candlestick_cur(tbl, n, unit, fromdt, todt) into c;
	LOOP
		fetch next from c into gl_row;
		-- raise info 'time: %, high: %, low: %, open: %, close: %', gl_row.time, gl_row.high, gl_row.low, gl_row.open, gl_row.close;
		exit when not found;
		return next gl_row;
	END LOOP;
end;
$$ language plpgsql
PARALLEL SAFE;


-- union by year
CREATE OR REPLACE FUNCTION candlestick_mv(tbl text, tf text, fromdt timestamp without time zone default '2000-01-01', todt timestamp without time zone default '2030-01-01') RETURNS setof cst
as $$
declare
	f text;
	y int;
	key text;
	qs text;
	qs2 text;
	u text;
	b int;
	e int;
	has_table boolean;
begin
	select '' into u;	select '' into qs;
	select date_part('year', fromdt) into b;
	select date_part('year',todt) into e;
	for y in b..e LOOP
		select tbl || '_' || y || '_candlestick' || tf into key;
		qs2 = format('select exists(select matviewname from pg_matviews where matviewname = %L) ', key);
		execute qs2 into has_table;
		raise info 'key: %, has_table: %', key, has_table;
		CONTINUE WHEN has_table is false;
		qs = format(qs || u || 'select * from %I', key );
		select ' union ' into u;
		raise info 'qs: %', qs;
	END LOOP;
	begin
		u = format(' where dt between %L and %L', fromdt, todt);
		raise info 'qs: %', qs || u;
		RETURN QUERY EXECUTE qs || u;
	exception when others then 
		raise notice '% %', SQLERRM, SQLSTATE;
	end;
end;
$$ language 'plpgsql'
PARALLEL SAFE;

