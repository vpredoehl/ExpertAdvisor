drop type fractal_type cascade;
create type fractal_type as ( ts timestamp without time zone, open numeric(10,6), close numeric(10,6), hi numeric(10,6), lo numeric(10,6), vol integer, target numeric(10,6), fractal_high bool, fractal_low bool );
create or replace function fractal(tbl text, periods int, unit text, fromdt timestamp without time zone default '-INFINITY', todt timestamp without time zone default 'INFINITY') 
returns setof fractal_type
as $$
begin
return query
select *, max(high) over fractal_window < high as fractal_high, min(low) over fractal_window > low as fractal_low 
	from public.candlestick(tbl, periods, unit, fromdt, todt)
	window 	fractal_window  as (rows between 2 preceding and 2 following exclude current row);
end;
$$
language 'plpgsql';

CREATE OR REPLACE FUNCTION fractal_mv(tbl text, tf text, fromdt timestamp without time zone default '-INFINITY', todt timestamp without time zone default 'INFINITY') RETURNS setof fractal_type
as $$
declare
	f text;
	y int;
	key text;
	qs text;
	u text;
begin
	select '' into u;	select '' into qs;
	for y in 2010..2022 LOOP
		select tbl || '_' || y || '_fractal' || tf into key;
		--raise info 'key: %', key;
		qs = format(qs || u || 'select * from %I', key );
		select ' union ' into u;
		--raise info 'qs: %', qs;
	END LOOP;
	begin
		u = format(' where dt between %L and %L', fromdt, todt);
		raise info 'qs: %', qs || u;
		RETURN QUERY EXECUTE qs || u;
	exception when others then 
		raise notice '% %', SQLERRM, SQLSTATE;
	end;
end;
$$ language 'plpgsql'
PARALLEL SAFE;

