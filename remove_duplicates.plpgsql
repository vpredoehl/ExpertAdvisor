create or replace function remove_pages(tbl text) returns void
as $code$
declare
	f text;
	rows int;
	last_rows int;
	qs text;
	p point;
	pg int;
begin
	qs = format('select tablename from pg_tables where tablename like %L order by 1',tbl);
	FOR f in execute qs LOOP
		qs = format('select (max(ctid)::text::point)[0] from %I',f);
		execute qs into pg;
		last_rows = 0;
		LOOP
			select point(pg-1000,0) into p;
			LOOP 
				qs = format('update %I set bid=bid where ctid>=%L', f, p);
				raise info 'executing: %', qs;
				execute qs ;
				GET DIAGNOSTICS rows = ROW_COUNT;
				raise info 'rows: %', rows;
				exit when rows = 0 or last_rows = rows;
				last_rows = rows;
			END LOOP ;
			EXIT WHEN rows > 0;	
			pg = pg - 1000;
		END LOOP;
	END LOOP;
end
$code$ language 'plpgsql';

create or replace function remove_duplicates_iter(tbl text) returns int
as $code$
declare
	qs text;
	f text;
	cnt int;
	tot integer := 0;
begin
	qs = format('select tablename from pg_tables where tablename like %L order by 1',tbl);
	FOR f in execute qs LOOP
		select remove_duplicates(f) into cnt;
		tot = tot + cnt;
	END LOOP;
end $code$
language 'plpgsql';

create or replace function remove_duplicates(tbl text) returns int
as $code$
declare
	qs text;
	v int;
	cnt integer := 0;
	ask numeric(10,6);
	bid numeric(10,6);
	dt timestamp without time zone;
	min_ctid tid;
begin
	raise info 'updating vol: %', tbl;
	qs = format('select  time, ask, bid, sum(vol), min(ctid), count(ctid) from %I group by 1,2,3 having count(ctid) > 1  order by 1', tbl);
	FOR dt, ask, bid, v, min_ctid in execute qs
	LOOP
		--raise info 'time: %, ask: %, bid: %, v: %, min_ctid: %', dt, ask, bid, v, min_ctid;
		qs = format('update %I set vol=%L where ctid=%L returning ctid', tbl, v, min_ctid);
		--raise info 'executing: %', qs;
		begin
			execute  qs into min_ctid;
		exception when others then 
			raise notice '% %', SQLERRM, SQLSTATE;
		end;

		qs = format('delete from %I where ctid in ( select ctid from %I where time=%L and ask=%L and bid=%L and ctid != %L )', tbl, tbl, dt, ask, bid, min_ctid);
		--raise info 'executing: %', qs;
		begin
			execute  qs;
		exception when others then 
			raise notice '% %', SQLERRM, SQLSTATE;
		end;
		cnt = cnt + 1;
	END LOOP;
	return cnt;
end $code$
language 'plpgsql';
